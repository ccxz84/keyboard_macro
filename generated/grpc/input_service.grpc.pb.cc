// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: input_service.proto

#include "input_service.pb.h"
#include "input_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* Input_method_names[] = {
  "/Input/StartRecording",
  "/Input/StopRecording",
};

std::unique_ptr< Input::Stub> Input::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Input::Stub> stub(new Input::Stub(channel, options));
  return stub;
}

Input::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartRecording_(Input_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopRecording_(Input_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Input::Stub::StartRecording(::grpc::ClientContext* context, const ::StartRequest& request, ::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StartRequest, ::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartRecording_, context, request, response);
}

void Input::Stub::async::StartRecording(::grpc::ClientContext* context, const ::StartRequest* request, ::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StartRequest, ::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecording_, context, request, response, std::move(f));
}

void Input::Stub::async::StartRecording(::grpc::ClientContext* context, const ::StartRequest* request, ::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecording_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StatusResponse>* Input::Stub::PrepareAsyncStartRecordingRaw(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StatusResponse, ::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartRecording_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StatusResponse>* Input::Stub::AsyncStartRecordingRaw(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRecordingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Input::Stub::StopRecording(::grpc::ClientContext* context, const ::StopRequest& request, ::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StopRequest, ::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopRecording_, context, request, response);
}

void Input::Stub::async::StopRecording(::grpc::ClientContext* context, const ::StopRequest* request, ::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StopRequest, ::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRecording_, context, request, response, std::move(f));
}

void Input::Stub::async::StopRecording(::grpc::ClientContext* context, const ::StopRequest* request, ::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRecording_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StatusResponse>* Input::Stub::PrepareAsyncStopRecordingRaw(::grpc::ClientContext* context, const ::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StatusResponse, ::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopRecording_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StatusResponse>* Input::Stub::AsyncStopRecordingRaw(::grpc::ClientContext* context, const ::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRecordingRaw(context, request, cq);
  result->StartCall();
  return result;
}

Input::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Input_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Input::Service, ::StartRequest, ::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Input::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StartRequest* req,
             ::StatusResponse* resp) {
               return service->StartRecording(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Input_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Input::Service, ::StopRequest, ::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Input::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StopRequest* req,
             ::StatusResponse* resp) {
               return service->StopRecording(ctx, req, resp);
             }, this)));
}

Input::Service::~Service() {
}

::grpc::Status Input::Service::StartRecording(::grpc::ServerContext* context, const ::StartRequest* request, ::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Input::Service::StopRecording(::grpc::ServerContext* context, const ::StopRequest* request, ::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


